
// app/api/bkash/payment/callback/route.js
import { NextResponse } from "next/server";
import axios from "axios";
import { connectDB } from "@/app/lib/connectDB";
import { withBkashAuth } from "@/app/api/bkash/payment/create/route";

export const bkashHeaders = async (bkashToken) => {
    return {
        "Content-Type": "application/json",
        Accept: "application/json",
        authorization: bkashToken,
        "x-app-key": process.env.bkash_api_key,
    };
};

async function handler(req, bkashToken) {
    const { searchParams } = new URL(req.url);
    const status = searchParams.get("status");
    const paymentID = searchParams.get("paymentID");

    const db = await connectDB();
    const paymentsCollection = db.collection('payments');
    const ordersCollection = db.collection('orders');

    console.log("bKash callback:", { status, paymentID });

    try {
        // Find payment record
        const payment = await paymentsCollection.findOne({ bkashPaymentID: paymentID });

        if (!payment) {
            console.error("Payment record not found for paymentID:", paymentID);
            return NextResponse.redirect(
                `${process.env.NEXT_PUBLIC_API_URL}/payment/error?message=payment_not_found`
            );
        }

        if (status === "cancel" || status === "failure") {
            // Update payment status
            await paymentsCollection.updateOne(
                { bkashPaymentID: paymentID },
                {
                    $set: {
                        status: status === "cancel" ? "cancelled" : "failed",
                        updatedAt: new Date(),
                        failureReason: status
                    }
                }
            );

            // Update order status
            await ordersCollection.updateOne(
                { orderID: payment.orderID },
                {
                    $set: {
                        status: "payment_failed",
                        updatedAt: new Date()
                    }
                }
            );

            return NextResponse.redirect(
                `${process.env.NEXT_PUBLIC_API_URL}/payment/error?message=${status}&orderID=${payment.orderID}`
            );
        }

        if (status === "success") {
            try {
                const { data } = await axios.post(
                    process.env.bkash_execute_payment_url,
                    { paymentID },
                    { headers: await bkashHeaders(bkashToken) }
                );

                console.log("Execute payment data:", data);

                if (data && data.statusCode === "0000") {
                    // Update payment record with success details
                    await paymentsCollection.updateOne(
                        { bkashPaymentID: paymentID },
                        {
                            $set: {
                                status: "completed",
                                transactionID: data.trxID,
                                customerMsisdn: data.customerMsisdn,
                                executedAt: new Date(),
                                updatedAt: new Date(),
                                bkashResponse: data
                            }
                        }
                    );

                    // Get the order to process it
                    const order = await ordersCollection.findOne({ orderID: payment.orderID });

                    if (order) {
                        let newPaymentStatus = "paid";
                        let newOrderStatus = "confirmed";

                        // Determine payment status based on payment option
                        if (order.paymentOption === "payDeliveryOnly") {
                            newPaymentStatus = "partial";
                            newOrderStatus = "confirmed";
                        }

                        // Update order with payment information
                        await ordersCollection.updateOne(
                            { orderID: payment.orderID },
                            {
                                $set: {
                                    status: newOrderStatus,
                                    paymentStatus: newPaymentStatus,
                                    paymentID: payment._id,
                                    updatedAt: new Date()
                                }
                            }
                        );

                        // Update product quantities
                        const quantityUpdates = order.cart?.map((item) => ({
                            productId: item.id,
                            size: item.selectedSize,
                            quantity: -Number.parseInt(item.quantity, 10),
                        }));

                        try {
                            await axios.post(`${process.env.API_URL}/api/orders/update-quantity`, {
                                updates: quantityUpdates,
                            });
                        } catch (error) {
                            console.error("Error updating product quantities:", error);
                        }
                    }

                    return NextResponse.redirect(
                        `${process.env.NEXT_PUBLIC_API_URL}/payment/success?orderID=${payment.orderID}&paymentID=${payment._id}`
                    );
                } else {
                    // Payment execution failed
                    await paymentsCollection.updateOne(
                        { bkashPaymentID: paymentID },
                        {
                            $set: {
                                status: "failed",
                                failureReason: "execution_failed",
                                updatedAt: new Date(),
                                bkashResponse: data
                            }
                        }
                    );

                    return NextResponse.redirect(
                        `${process.env.NEXT_PUBLIC_API_URL}/payment/error?message=execution_failed&orderID=${payment.orderID}`
                    );
                }
            } catch (error) {
                console.error("Execute payment failed:", error.message);

                await paymentsCollection.updateOne(
                    { bkashPaymentID: paymentID },
                    {
                        $set: {
                            status: "failed",
                            failureReason: "execution_error",
                            updatedAt: new Date(),
                            errorDetails: error.message
                        }
                    }
                );

                return NextResponse.redirect(
                    `${process.env.NEXT_PUBLIC_API_URL}/payment/error?message=execution_error&orderID=${payment.orderID}`
                );
            }
        }

        return NextResponse.json({ error: "Unknown payment status" }, { status: 400 });
    } catch (error) {
        console.error("Callback processing error:", error);
        return NextResponse.redirect(
            `${process.env.NEXT_PUBLIC_API_URL}/payment/error?message=processing_error`
        );
    }
}

export const GET = withBkashAuth(handler);
